DEBUG=0
GIT_VERSION := " $(shell git rev-parse --short HEAD)"
SVN_VERSION := " $(shell git svn log --limit 1 | grep "|" | cut --fields=1 --delimiter=" ")"

UNAME=$(shell uname -a)

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
	platform = win
else ifneq ($(findstring MINGW,$(UNAME)),)
	platform = win
else ifneq ($(findstring Darwin,$(UNAME)),)
	platform = osx
else ifneq ($(findstring win,$(UNAME)),)
	platform = win
endif
endif

prefix := /usr
libdir := $(prefix)/lib

LIBRETRO_DIR := libretro

WITH_DYNAREC :=
DYNAFLAGS :=
TARGET_NAME := dosbox_svn

# system platform
system_platform = unix
ifneq ($(findstring MINGW,$(shell uname -s)),)
	EXE_EXT = .exe
	system_platform = win
	ifneq ($(findstring MINGW32,$(shell uname -s)),)
		WITH_DYNAREC=x86
	else ifneq ($(findstring MINGW64,$(shell uname -s)),)
		WITH_DYNAREC=x86_64
	endif
else ifneq ($(findstring Darwin,$(shell uname -a)),)
	system_platform = osx
else ifneq ($(findstring Linux,$(shell uname -s)),)
	ifneq ($(findstring i686,$(shell uname -a)),)
		WITH_DYNAREC=x86
	else ifneq ($(findstring x86_64,$(shell uname -a)),)
		WITH_DYNAREC=x86_64
	endif
endif

ifneq (,$(filter $(platform),unix osx))
	COMMONFLAGS += -DC_HAVE_MPROTECT="1"
endif

ifeq ($(WITH_DYNAREC), arm)
	COMMONFLAGS += -DC_DYNREC="1" -DC_TARGETCPU="ARMV7LE"
else ifeq ($(WITH_DYNAREC), oldarm)
	COMMONFLAGS += -DC_DYNREC="1" -DC_TARGETCPU="ARMV4LE"
else ifeq ($(WITH_DYNAREC), x86_64)
	ifneq ($(platform),win)
		COMMONFLAGS += -DC_DYNREC="1" -DC_TARGETCPU="X86_64"
	endif
else ifeq ($(WITH_DYNAREC), x86)
	COMMONFLAGS += -DC_DYNAMIC_X86="1" -DC_TARGETCPU="X86"
else ifeq ($(WITH_DYNAREC), ppc)
	COMMONFLAGS += -DC_DYNREC="1" -DC_TARGETCPU="POWERPC"
else ifeq ($(WITH_DYNAREC), mips)
	#COMMONFLAGS += -DC_DYNREC="1" -DC_TARGETCPU="MIPSEL"
endif

ifeq ($(platform), unix)
	TARGET := $(TARGET_NAME)_libretro.so
	LDFLAGS += -shared -Wl,--version-script=link.T
	fpic = -fPIC
else ifeq ($(platform), osx)
	TARGET := $(TARGET_NAME)_libretro.dylib
	LDFLAGS += -dynamiclib -lSDL -lsdl_net
	fpic = -fPIC
	ifeq ($(arch),ppc)
		COMMONFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
	endif
	OSXVER = `sw_vers -productVersion | cut -d. -f 2`
	OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
	fpic += -mmacosx-version-min=10.1
ifndef ($(UNIVERSAL))
	CFLAGS += $(ARCHFLAGS)
	CXXFLAGS += $(ARCHFLAGS)
	LDFLAGS += $(ARCHFLAGS)
endif

# iOS
else ifneq (,$(findstring ios,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_ios.dylib
	COMMONFLAGS += -DHAVE_POSIX_MEMALIGN=1 -marm
	fpic = -fPIC
	LDFLAGS += -dynamiclib

	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	endif
ifeq ($(platform),ios-arm64)
	CC = cc -arch arm64 -isysroot $(IOSSDK)
	CXX = c++ -arch arm64 -isysroot $(IOSSDK)
	# No dynarec for arm64 yet
	WITH_DYNAREC = 
else
	CC = cc -arch armv7 -isysroot $(IOSSDK)
	CXX = c++ -arch armv7 -isysroot $(IOSSDK)
	WITH_DYNAREC = arm
endif
	COMMONFLAGS += -DIOS
ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
	CC += -miphoneos-version-min=8.0
	COMMONFLAGS += -miphoneos-version-min=8.0
else
	CC += -miphoneos-version-min=5.0
	COMMONFLAGS += -miphoneos-version-min=5.0
endif
else ifeq ($(platform), theos_ios)
DEPLOYMENT_IOSVERSION = 5.0
TARGET = iphone:latest:$(DEPLOYMENT_IOSVERSION)
ARCHS = armv7 armv7s
TARGET_IPHONEOS_DEPLOYMENT_VERSION=$(DEPLOYMENT_IOSVERSION)
THEOS_BUILD_DIR := objs
WITH_DYNAREC = arm
COMMONFLAGS += -DIOS
COMMONFLAGS += -DHAVE_POSIX_MEMALIGN=1 -marm
include $(THEOS)/makefiles/common.mk

LIBRARY_NAME = $(TARGET_NAME)_libretro_ios

else ifeq ($(platform), qnx)
	TARGET := $(TARGET_NAME)_libretro_$(platform).so
	fpic := -fPIC
	SHARED := -lcpp -lm -shared -Wl,-version-script=link.T
	CC = qcc -Vgcc_ntoarmv7le
	CC_AS = qcc -Vgcc_ntoarmv7le
	CXX = QCC -Vgcc_ntoarmv7le_cpp
	AR = QCC -Vgcc_ntoarmv7le
	PLATFORM_DEFINES := -D__BLACKBERRY_QNX__ -fexceptions -marm -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp

else ifeq ($(platform), android)
	TARGET := $(TARGET_NAME)_libretro.so
	COMMONFLAGS += -fpermissive
	LDFLAGS += -shared -Wl,--version-script=link.T

	CC = arm-linux-androideabi-gcc
	CXX = arm-linux-androideabi-g++

	fpic = -fPIC

# PSP
else ifeq ($(platform), psp1)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = psp-gcc$(EXE_EXT)
	CXX = psp-g++$(EXE_EXT)
	AR = psp-ar$(EXE_EXT)
	WITH_DYNAREC = mips
	COMMONFLAGS += -DPSP -G0
	STATIC_LINKING = 1

# Vita
else ifeq ($(platform), vita)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = arm-vita-eabi-gcc$(EXE_EXT)
	CXX = arm-vita-eabi-g++$(EXE_EXT)
	AR = arm-vita-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = arm
	COMMONFLAGS += -DVITA
	COMMONFLAGS += -mthumb -mcpu=cortex-a9 -mfloat-abi=hard -ftree-vectorize -ffast-math -fsingle-precision-constant -funroll-loops
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fno-optimize-sibling-calls
	STATIC_LINKING = 1

# CTR
else ifeq ($(platform), ctr)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITARM)/bin/arm-none-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITARM)/bin/arm-none-eabi-g++$(EXE_EXT)
	AR = $(DEVKITARM)/bin/arm-none-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = oldarm
	ENDIANNESS_DEFINES :=
	COMMONFLAGS += -DARM11 -D_3DS -Os -s -I$(CTRULIB)/include/
	COMMONFLAGS += -DHAVE_MKDIR
	COMMONFLAGS += -march=armv6k -mtune=mpcore -mfloat-abi=hard
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fomit-frame-pointer -fstrict-aliasing -ffast-math
	COMMONFLAGS += -DDISABLE_EXCEPTIONS
	STATIC_LINKING = 1
	IS_X86 := 0
	NEED_BPP := 16

# Wii
else ifeq ($(platform), wii)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	COMMONFLAGS += -DGEKKO -mrvl -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DWORDS_BIGENDIAN=1
	STATIC_LINKING = 1

# Wii U
else ifeq ($(platform), wiiu)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	COMMONFLAGS += -DGEKKO -DWIIU -DHW_RVL -mwup -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DMSB_FIRST -DWORDS_BIGENDIAN=1
	COMMONFLAGS += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int
	STATIC_LINKING = 1
	WITH_DYNAREC=

else ifeq ($(platform), emscripten)
	TARGET := $(TARGET_NAME)_libretro_$(platform).bc
	STATIC_LINKING = 1
	COMMONFLAGS += -DEMSCRIPTEN

else
	COMMONFLAGS += -mno-ms-bitfields
	TARGET := $(TARGET_NAME)_libretro.dll
	LDFLAGS += -shared -static-libgcc -static-libstdc++ -Wl,--version-script=link.T -lwinmm -Wl,-Bstatic `sdl-config --static-libs` -lsdl_net -Wl,-Bdynamic -liphlpapi -lws2_32
endif

ifeq ($(DEBUG), 1)
COMMONFLAGS += -O0 -g
else
COMMONFLAGS += -O3 -DNDEBUG -DGIT_VERSION=\"$(GIT_VERSION)\" -DSVN_VERSION=\"$(SVN_VERSION)\" -DC_IPX
endif

CORE_DIR    := ..
INCFLAGS    :=
SOURCES_C   :=
SOURCES_CXX :=

include Makefile.common

OBJECTS  = $(SOURCES_CXX:.cpp=.o) $(SOURCES_C:.c=.o)
CXXFLAGS += -D__LIBRETRO__ $(fpic) $(INCFLAGS) $(COMMONFLAGS)
CFLAGS   += -D__LIBRETRO__ $(fpic) $(INCFLAGS) $(COMMONFLAGS)
LDFLAGS  += -lm $(fpic)


ifeq ($(platform), theos_ios)
COMMON_FLAGS := -DIOS -DARM $(COMMON_DEFINES) $(INCFLAGS) -I$(THEOS_INCLUDE_PATH) -Wno-error
$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
$(LIBRARY_NAME)_CXXFLAGS += $(CXXFLAGS) $(COMMON_FLAGS)
${LIBRARY_NAME}_FILES = $(SOURCES_CXX) $(SOURCES_C)
include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)
$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else
	$(CXX) -o $@ $(OBJECTS) $(LDFLAGS)
endif

%.o: %.c
	$(CC) $(CFLAGS) -c $^ -o $@

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@


clean:
	rm -f $(OBJECTS) $(TARGET)

install:
	install -D -m 755 $(TARGET) $(DESTDIR)$(libdir)/$(LIBRETRO_DIR)/$(TARGET)

uninstall:
	rm $(DESTDIR)$(libdir)/$(LIBRETRO_DIR)/$(TARGET)

.PHONY: clean install uninstall
endif
